{"version":3,"sources":["logo.svg","AsciiPlayer.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","AsciiPlayer","state","frameIndex","oldProps","_this2","this","_this$props","props","txt","startingFrameIndex","console","time","lines","split","timeEnd","setState","frameWait","parseInt","ticker","setInterval","_ref","loop","Math","max","newFrameIndex","length","clearTimeout","window","stop","_this$state","react_default","a","createElement","frame","slice","className","style","textAlign","height","visibility","map","line","index","key","minHeight","lineHeight","PureComponent","defaultProps","App","fetch","then","x","text","padding","margin","background","border","display","src_AsciiPlayer","Component","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","log","onUpdate","onSuccess","catch","error","ReactDOM","render","src_App_0","document","getElementById","URL","process","href","origin","addEventListener","concat","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.149290ce.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\n\nconst FRAME_RATE = 67; // 15 frame/sec\nconst FRAME_HEIGHT = 14; // includes frameWait header\n\nclass AsciiPlayer extends PureComponent {\n  static propTypes = {\n    loop: PropTypes.bool,\n    startingFrameIndex: PropTypes.number,\n    txt: PropTypes.string,\n  };\n  static defaultProps = {\n    startingFrameIndex: 0,\n    loop: false,\n    txt: null,\n  };\n  state = {\n    frameIndex: null,\n  };\n  componentDidUpdate(oldProps) {\n    const {txt, startingFrameIndex} = this.props;\n    const {txt: oldTxt} = oldProps;\n    if (txt !== oldTxt) {\n      console.time('split txt');\n      const lines = txt.split('\\n')\n      console.timeEnd('split txt');\n      this.setState( {\n        frameWait: (parseInt(lines[startingFrameIndex*FRAME_HEIGHT]) - 1),\n        frameIndex: startingFrameIndex*FRAME_HEIGHT,\n        lines,\n      });\n      this.ticker = setInterval(() => {\n        this.setState(({lines, frameIndex, frameWait}) => {\n          const { loop } = this.props;\n          // console.log('tick', {frameIndex, frameWait});\n          if (frameWait) {\n            return {frameWait: Math.max(frameWait-1, 0)}\n          }\n          let newFrameIndex = frameIndex + 1;\n          if (newFrameIndex * FRAME_HEIGHT >= lines.length) {\n            if (loop) {\n              newFrameIndex = 0;\n            } else {\n              clearTimeout(this.ticker);\n              return;\n            }\n          }\n          let newFrameWait = parseInt(lines[newFrameIndex*FRAME_HEIGHT]) - 1;\n          return {frameIndex: newFrameIndex, frameWait: newFrameWait};\n        });\n      }, FRAME_RATE);\n      window.stop = () => clearTimeout(this.ticker);\n    }\n  };\n  render() {\n    const { lines, frameIndex } = this.state;\n    if (frameIndex == null) {\n      return (\n        <div> nothing </div>\n      );\n    }\n    let frame = lines.slice(frameIndex*FRAME_HEIGHT+1, (1+frameIndex)*FRAME_HEIGHT);\n    return (\n      <pre className=\"movie-screen\" style={{textAlign: 'left'}}>\n        {/* give screen a fixed width of 67 monospace characters */}\n        <div style={{height: '0', visibility: 'hidden'}}>...................................................................</div>\n\n        {frame.map((line, index) => (<span key={index} style={{minHeight: '1.25em', lineHeight: '1.25'}}>{line}<br/></span>))}\n      </pre>\n    );\n  }\n}\n\nexport default AsciiPlayer;\n","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport PropTypes from 'prop-types'\nimport AsciiPlayer from './AsciiPlayer.js';\nimport './App.css';\n\nclass App extends Component {\n  state = {};\n  componentDidMount() {\n    console.time('fetch sw1.txt');\n    fetch('./sw1.txt').then(x => x.text()).then((txt) => {\n      console.timeEnd('fetch sw1.txt');\n      this.setState({txt});\n    });\n  }\n  render() {\n    const { style } = this.props;\n    const { txt } = this.state;\n    return (\n      <div className=\"App\">\n        <div style={{\n          padding: '10px',\n          margin: '10px',\n          background: '#262626',\n          border: '1px dotted grey',\n          display: 'inline-block',\n        }}>\n          <AsciiPlayer txt={txt} startingFrameIndex={243} loop={true} style={{border: '1px solid white', padding: '10px'}}/>\n        </div>\n        {/*<header className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          <p>\n            Edit <code>src/App.js</code> and save to reload.\n          </p>\n          <a\n            className=\"App-link\"\n            href=\"https://reactjs.org\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            Learn React\n          </a>\n        </header> */}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}